#!/usr/bin/python
# -*- coding: utf-8 -*- 

import sys
import xmltodict

class VulnerabilityCatalogException(Exception): pass
class VulnerabilityCatalogDuplicateIDException(VulnerabilityCatalogException): pass

class Vulnerability:
	"""
	Class that represents a single vulnerability.
	"""

	def __init__(self, data):
		"""
		Initialize class from XML data read by xmltodict parser
		"""
		self.vulnerabilityId = data['@id']
		self.vulnerabilitySource = data['@source']

		self.vulnerabilityTags = []

		if data.has_key('tag'):

			if isinstance(data['tag'], list):
				for tag in data['tag']:
					self.vulnerabilityTags.append(tag['@id'])

			else:
				self.vulnerabilityTags.append(data['tag']['@id'])

		self.vulnerabilityName = {}
		if isinstance(data['name'], list):

			for name in data['name']:
				self.vulnerabilityName[name['@lang']] = name['#text']

		else:
			self.vulnerabilityName[data['name']['@lang']] = data['name']['#text']

	def __str__(self):
		return self.getName(lang='hr')

	def getName(self, lang="en"):
		try:
			return unicode(self.vulnerabilityName[lang])
		except KeyError:
			return unicode(self.vulnerabilityName['en'])

	def getId(self):
		return self.vulnerabilityId

class VulnerabilityCatalog:
	"""
	Class holding all the vulnerabilities.
	"""

	def __init__(self):
                self.vulnerabilityCatalog = []
		self.vulnerabilityCatalogById = {}

        def loadFromXMLFile(self, xmlFile):
                self.vulnerabilityCatalog = []
		self.vulnerabilityCatalogById = {}
                self.addFromXMLFile(xmlFile)

        def addFromXMLFile(self, xmlFile):

                data = xmltodict.parse(open(xmlFile))

                for vulnerability in data[u'vulnerabilities_catalog'][u'vulnerability']:
			v = Vulnerability(vulnerability)
			self.vulnerabilityCatalog.append(v)

			vid = v.getId()
                        if self.vulnerabilityCatalogById.has_key(vid):
                                raise VulnerabilityCatalogDuplicateIDException(vid)

                        self.vulnerabilityCatalogById[vid] = v

        def getVulnerabilities(self):
                return self.vulnerabilityCatalog

	def getVulnerabilityById(self, vulnerabilityId):
		return self.vulnerabilityCatalogById[vulnerabilityId]

def main(xmlFile):
	vulnerabilityCatalog = VulnerabilityCatalog()
	vulnerabilityCatalog.loadFromXMLFile(xmlFile)

if __name__ == '__main__':
	main(sys.argv[1])
